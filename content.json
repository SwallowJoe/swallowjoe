{"meta":{"title":"SwallowJoe的博客","subtitle":"Be a real go-getter, NEVER SETTLE!","description":"君子知命不惧，日日自新","author":"SwallowJoe","url":"https://swallowjoe.github.io","root":"/"},"pages":[{"title":"","date":"2022-02-26T09:28:27.221Z","updated":"2022-02-26T09:28:27.221Z","comments":true,"path":"404/index.html","permalink":"https://swallowjoe.github.io/404/index.html","excerpt":"","text":"layout: falsecomments: falsetitle: 404permalink: &#x2F;404 幽灵404页面 html,body{background:#28254C;font-family:'Ubuntu';}*{box-sizing:border-box;}.box{width:350px;height:100%;max-height:600px;min-height:450px;background:#332F63;border-radius:20px;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);padding:30px 50px;}.box .box__ghost{padding:15px 25px 25px;position:absolute;left:50%;top:30%;transform:translate(-50%,-30%);}.box .box__ghost .symbol:nth-child(1){opacity:.2;animation:shine 4s ease-in-out 3s infinite;}.box .box__ghost .symbol:nth-child(1):before,.box .box__ghost .symbol:nth-child(1):after{content:'';width:12px;height:4px;background:#fff;position:absolute;border-radius:5px;bottom:65px;left:0;}.box .box__ghost .symbol:nth-child(1):before{transform:rotate(45deg);}.box .box__ghost .symbol:nth-child(1):after{transform:rotate(-45deg);}.box .box__ghost .symbol:nth-child(2){position:absolute;left:-5px;top:30px;height:18px;width:18px;border:4px solid;border-radius:50%;border-color:#fff;opacity:.2;animation:shine 4s ease-in-out 1.3s infinite;}.box .box__ghost .symbol:nth-child(3){opacity:.2;animation:shine 3s ease-in-out .5s infinite;}.box .box__ghost .symbol:nth-child(3):before,.box .box__ghost .symbol:nth-child(3):after{content:'';width:12px;height:4px;background:#fff;position:absolute;border-radius:5px;top:5px;left:40px;}.box .box__ghost .symbol:nth-child(3):before{transform:rotate(90deg);}.box .box__ghost .symbol:nth-child(3):after{transform:rotate(180deg);}.box .box__ghost .symbol:nth-child(4){opacity:.2;animation:shine 6s ease-in-out 1.6s infinite;}.box .box__ghost .symbol:nth-child(4):before,.box .box__ghost .symbol:nth-child(4):after{content:'';width:15px;height:4px;background:#fff;position:absolute;border-radius:5px;top:10px;right:30px;}.box .box__ghost .symbol:nth-child(4):before{transform:rotate(45deg);}.box .box__ghost .symbol:nth-child(4):after{transform:rotate(-45deg);}.box .box__ghost .symbol:nth-child(5){position:absolute;right:5px;top:40px;height:12px;width:12px;border:3px solid;border-radius:50%;border-color:#fff;opacity:.2;animation:shine 1.7s ease-in-out 7s infinite;}.box .box__ghost .symbol:nth-child(6){opacity:.2;animation:shine 2s ease-in-out 6s infinite;}.box .box__ghost .symbol:nth-child(6):before,.box .box__ghost .symbol:nth-child(6):after{content:'';width:15px;height:4px;background:#fff;position:absolute;border-radius:5px;bottom:65px;right:-5px;}.box .box__ghost .symbol:nth-child(6):before{transform:rotate(90deg);}.box .box__ghost .symbol:nth-child(6):after{transform:rotate(180deg);}.box .box__ghost .box__ghost-container{background:#fff;width:100px;height:100px;border-radius:100px 100px 0 0;position:relative;margin:0 auto;animation:upndown 3s ease-in-out infinite;}.box .box__ghost .box__ghost-container .box__ghost-eyes{position:absolute;left:50%;top:45%;height:12px;width:70px;}.box .box__ghost .box__ghost-container .box__ghost-eyes .box__eye-left{width:12px;height:12px;background:#332F63;border-radius:50%;margin:0 10px;position:absolute;left:0;}.box .box__ghost .box__ghost-container .box__ghost-eyes .box__eye-right{width:12px;height:12px;background:#332F63;border-radius:50%;margin:0 10px;position:absolute;right:0;}.box .box__ghost .box__ghost-container .box__ghost-bottom{display:flex;position:absolute;top:100%;left:0;right:0;}.box .box__ghost .box__ghost-container .box__ghost-bottom div{flex-grow:1;position:relative;top:-10px;height:20px;border-radius:100%;background-color:#fff;}.box .box__ghost .box__ghost-container .box__ghost-bottom div:nth-child(2n){top:-12px;margin:0 -0px;border-top:15px solid #332F63;background:transparent;}.box .box__ghost .box__ghost-shadow{height:20px;box-shadow:0 50px 15px 5px #3B3769;border-radius:50%;margin:0 auto;animation:smallnbig 3s ease-in-out infinite;}.box .box__description{position:absolute;bottom:30px;left:50%;transform:translateX(-50%);}.box .box__description .box__description-container{color:#fff;text-align:center;width:200px;font-size:16px;margin:0 auto;}.box .box__description .box__description-container .box__description-title{font-size:24px;letter-spacing:.5px;}.box .box__description .box__description-container .box__description-text{color:#8C8AA7;line-height:20px;margin-top:20px;}.box .box__description .box__button{display:block;position:relative;background:#FF5E65;border:1px solid transparent;border-radius:50px;height:50px;text-align:center;text-decoration:none;color:#fff;line-height:50px;font-size:18px;padding:0 70px;white-space:nowrap;margin-top:25px;transition:background .5s ease;overflow:hidden;}.box .box__description .box__button:before{content:'';position:absolute;width:20px;height:100px;background:#fff;bottom:-25px;left:0;border:2px solid #fff;transform:translateX(-50px) rotate(45deg);transition:transform .5s ease;}.box .box__description .box__button:hover{background:transparent;border-color:#fff;}.box .box__description .box__button:hover:before{transform:translateX(250px) rotate(45deg);}@keyframes upndown{0%{transform:translateY(5px);}50%{transform:translateY(15px);}100%{transform:translateY(5px);}}@keyframes smallnbig{0%{width:90px;}50%{width:100px;}100%{width:90px;}}@keyframes shine{0%{opacity:.2;}25%{opacity:.1;}50%{opacity:.2;}100%{opacity:.2;}} 404错误！ 看来我们找不到你要找的那一页 返回 var pageX =$(document).width();var pageY =$(document).height();var mouseY=0;var mouseX=0;$(document).mousemove(function(event ) {mouseY =event.pageY;yAxis =(pageY/2-mouseY)/pageY*300;mouseX =event.pageX / -pageX;xAxis =-mouseX *100 - 100;$('.box__ghost-eyes').css({'transform':'translate('+ xAxis +'%,-'+ yAxis +'%)' });});"}],"posts":[{"title":"Vulkan入门(1)-环境配置","slug":"Vulkan入门-1-环境配置","date":"2022-02-26T13:13:24.000Z","updated":"2022-02-26T14:20:03.009Z","comments":true,"path":"2022/02/26/Vulkan入门-1-环境配置/","link":"","permalink":"https://swallowjoe.github.io/2022/02/26/Vulkan%E5%85%A5%E9%97%A8-1-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","excerpt":"","text":"参考资料 简述 一. 准备环境 1.1 开发环境 1.2 下载 SDK 1.3 安装SDK 1.4 安装驱动 1.5. 运行示例程序 二. GLFW 安装 三. GLM 安装 四. 手动编译示例代码 4.1 在编译示例代码的时候老是报错，找不到vulkan头文件。 4.2 error adding symbols: DSO missing from command line 4.3 运行示例 五. 主要代码 5.1 main.cpp 5.2 Makefile 参考资料 https://vulkan.lunarg.com/doc/sdk/1.2.170.0/linux/getting_started.html https://github.com/google/glog [pkg-config的用法]https://www.cnblogs.com/chris-cp/p/3580002.html [解决&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libglog.so.0: error adding symbols: DSO missing from command line]https://blog.csdn.net/u010987458/article/details/72235408 https://www.glfw.org/docs/3.3/build_guide.html#build_link_cmake_package [GLFW]https://www.glfw.org/ [GLM]https://github.com/g-truc/glm 简述本文主要是介绍如何在 ubuntu 机器上安装并编译Vulkan程序。 一. 准备环境1.1 开发环境12345sudo apt-get updatesudo apt-get dist-upgradesudo apt-get install libglm-dev cmake libxcb-dri3-0 libxcb-present0 libpciaccess0 libpng-dev libxcb-keysyms1-dev libxcb-dri3-dev libx11-dev libmirclient-dev libwayland-dev libxrandr-dev libxcb-ewmh-devsudo apt-get install git libpython2.7 1.2 下载 SDK官方网站：https://vulkan.lunarg.com/ 下载SDK包：vulkan-sdk.tar.gz 1234cd ~/Programmkdir vulkancd vulkantar zxf $HOME/Downloads/vulkan-sdk.tar.gz 解压后的文件目录如下： 文件夹 描述 x86_64&#x2F;bin Vulkan工具和命令 x86_64&#x2F;include&#x2F;vulkan 编译链接头文件 x86_64&#x2F;lib Vulkan加载程序库和layer运行时库 x86_64&#x2F;etc&#x2F;explicit_layer.d .json 用于Vulkan验证层的清单文件 config 样本层设置文件，系统配置说明 doc Khronos SPIRV，Vulkan，Loader和WSI规范 examples Vulkan程序示例 samples Vulkan的示例代码 source glslang和所选Vulkan组件的源和调试库 1.3 安装SDK123456source ~/Program/vulkan/1.2.170.0/setup-env.shexport VULKAN_SDK=~/vulkan/1.2.170.0/x86_64export PATH=$VULKAN_SDK/bin:$PATHexport LD_LIBRARY_PATH=$VULKAN_SDK/lib:$LD_LIBRARY_PATHexport VK_LAYER_PATH=$VULKAN_SDK/etc/explicit_layer.d 大功告成，检查一下：输入vulkaninfo&#117;&#98;&#117;&#x6e;&#x74;&#117;&#x40;&#x31;&#x38;&#x2e;&#x30;&#x34;&#76; ~ vulkaninfoCannot create Vulkan instance.&#x2F;home&#x2F;lunarg&#x2F;sdk-build&#x2F;Vulkan-Tools&#x2F;vulkaninfo&#x2F;vulkaninfo.c:921: failed with VK_ERROR_INCOMPATIBLE_DRIVER wtf, 发生了什么？等等，貌似我们没有检查是否安装了驱动。。。 1.4 安装驱动123456789sudo add-apt-repository ppa:oibaf/graphics-driverssudo apt updatesudo apt upgradeapt install libvulkan1 mesa-vulkan-drivers vulkan-utils// 或者试试：sudo add-apt-repository ppa:graphics-drivers/ppasudo apt upgradesudo apt install nvidia-graphics-drivers-396 nvidia-settings vulkan vulkan-utils 检查一下：输入vulkaninfo 或者：vulkaninfo –html , 在当前目录生成 vulkaninfo.html 文件，用浏览器打开，可以看到更多信息 1.5. 运行示例程序12345cd Program/vulkan/1.1.160.0/examplesmkdir buildcd buildcmake ..make make成功后会在当前目录生成： 运行示例程序： 1./vkcube 一个旋转的立方体～ 二. GLFW 安装Vulkan本身是一个与平台无关的API，不包括用于创建显示渲染结果的窗口的工具。 为了从Vulkan的跨平台优势中受益并避免X11的限制，我们将使用GLFW库来创建一个支持Windows，Linux和MacOS的窗口。还有其他可用于此目的的库，如SDL，但GLFW的优势在于它除了窗口创建之外，还抽象了Vulkan中一些其他特定于平台的东西。我们将从源代码安装GLFW而不是使用软件包，因为Vulkan支持需要最新版本。 可以在官方网站上找到这些来源。将源代码解压缩到一个方便的目录，并使用CMakeLists.txt等文件打开目录中的终端。 github地址：https://github.com/glfw/glfw解压后进入其主目录：cmake .有报错： 12345678-- Looking for shmat - found-- Found X11: /usr/lib/x86_64-linux-gnu/libX11.soCMake Error at CMakeLists.txt:220 (message): The Xinerama headers were not found-- Configuring incomplete, errors occurred!See also &quot;/home/jh/Program/vulkan/glfw-master/CMakeFiles/CMakeOutput.log&quot;.See also &quot;/home/jh/Program/vulkan/glfw-master/CMakeFiles/CMakeError.log&quot;. 缺少环境： 1$ ~/Program/vulkan/glfw-master  sudo apt-get install libsdl2-dev 然后重新: cmake . 123456🦄  ~/Program/vulkan/glfw-master  cmake .-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE) -- Using X11 for window creation-- Configuring done-- Generating done-- Build files have been written to: /home/jh/Program/vulkan/glfw-master 濡染没有报错，但这个也是没有成功的：缺少Doxygensudo apt-get install doxygen 重新: cmake .最后: make成功后：sudo make install 三. GLM 安装与DirectX 12不同，Vulkan不包含用于线性代数运算的库，因此我们必须下载一个。GLM是一个很好的库，设计用于图形API，也常用于OpenGL。它是一个只有头的库，可以从libglm-dev包安装： sudo apt install libglm-dev 四. 手动编译示例代码4.1 在编译示例代码的时候老是报错，找不到vulkan头文件。123456$ gcc -o main main.cpp -lglfw3In file included from main.cpp:2:/usr/local/include/GLFW/glfw3.h:215:12: fatal error: vulkan/vulkan.h: 没有那个文件或目录 #include &lt;vulkan/vulkan.h&gt; ^~~~~~~~~~~~~~~~~compilation terminated. 当然是环境设置的问题：需要将头文件等拷贝到对应system文件夹 12345678cd Program/vulkan/1.2.170.0/x86_64sudo cp -r include/vulkan/ /usr/local/include/sudo cp -P lib/libvulkan.so* /usr/local/lib/sudo cp lib/libVkLayer_*.so /usr/local/lib/sudo mkdir -p /usr/local/share/vulkan/explicit_layer.dsudo cp etc/explicit_layer.d/VkLayer_*.json /usr/local/share/vulkan/explicit_layer.d sudo ldconfig 4.2 error adding symbols: DSO missing from command line123456makeg++ -std=c++17 -I/home/jh/Program/vulkan/1.1.160.0/x86_64/include -o VulkanTest main.cpp -L/home/jh/Program/vulkan/1.1.160.0/x86_64/lib -lvulkan -lglfw3/usr/bin/ld: //usr/local/lib/libglfw3.a(vulkan.c.o): undefined reference to symbol &#x27;dlclose@@GLIBC_2.2.5&#x27;/usr/bin/ld: //lib/x86_64-linux-gnu/libdl.so.2: error adding symbols: DSO missing from command linecollect2: error: ld returned 1 exit statusmake: *** [Makefile:8：VulkanTest] 错误 1 cd &#x2F;usr&#x2F;lib&#x2F;ll |grep -iE “liblog”没有文件 https://github.com/google/glog下载解压, 进入解压后的主目录，执行：.&#x2F;autogen.sh &amp;&amp; .&#x2F;configure &amp;&amp; make &amp;&amp; make install 如果报错：autogen.sh: 5: autogen.sh: autoreconf: not foundsudo apt-get install autoconfsudo apt-get install automakesudo apt-get install libtool 重新执行：.&#x2F;autogen.sh &amp;&amp; .&#x2F;configure &amp;&amp; make &amp;&amp; make install可能还有权限问题： 123456-- Up-to-date: /usr/local/include/GLFWCMake Error at cmake_install.cmake:41 (file): file INSTALL cannot set permissions on &quot;/usr/local/include/GLFW&quot;make: *** [Makefile:118：install] 错误 1 执行：cd ..chmod a+x glog-master -Rcd glog-mastermake &amp;&amp; make install okay,现在可以在Makefile文件中添加：-lglog 重新 make 还是会存在这个问题，笔者查阅各种资料，大部分指明在Makefile中加入 -ldl 即可，尝试后失败。最后发现是 Makefile 文件写的有问题，改成如[#5.2]即可. 4.3 运行示例make 成功后，会在当前目录生成 VulkanTest 可执行文件: 1./VulkanTest 结果如下: 五. 主要代码5.1 main.cpp123456789101112131415161718192021222324252627282930313233#define GLFW_INCLUDE_VULKAN#include &lt;GLFW/glfw3.h&gt;#define GLM_FORCE_RADIANS#define GLM_FORCE_DEPTH_ZERO_TO_ONE#include &lt;glm/vec4.hpp&gt;#include &lt;glm/mat4x4.hpp&gt;#include &lt;iostream&gt;int main() &#123; glfwInit(); glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API); GLFWwindow* window = glfwCreateWindow(800, 600, &quot;Vulkan window&quot;, nullptr, nullptr); uint32_t extensionCount = 0; vkEnumerateInstanceExtensionProperties(nullptr, &amp;extensionCount, nullptr); std::cout &lt;&lt; extensionCount &lt;&lt; &quot; extensions supported&quot; &lt;&lt; std::endl; glm::mat4 matrix; glm::vec4 vec; auto test = matrix * vec; while(!glfwWindowShouldClose(window)) &#123; glfwPollEvents(); &#125; glfwDestroyWindow(window); glfwTerminate(); return 0;&#125; 5.2 Makefile12345678910111213141516VULKAN_SDK_PATH = /home/jh/Program/vulkan/1.1.160.0/x86_64CFLAGS = -std=c++17 -I$(VULKAN_SDK_PATH)/includeLDFLAGS = -L$(VULKAN_SDK_PATH)/lib -lvulkan `pkg-config --static --libs glfw3`LDFLAGS += -ldlVulkanTest: main.cpp g++ $(CFLAGS) -o VulkanTest main.cpp $(LDFLAGS).PHONY: test cleantest: VulkanTest LD_LIBRARY_PATH=$(VULKAN_SDK_PATH)/lib VK_LAYER_PATH=$(VULKAN_SDK_PATH)/etc/explicit_layer.d ./VulkanTestclean:rm -f VulkanTest","categories":[{"name":"图像引擎","slug":"图像引擎","permalink":"https://swallowjoe.github.io/categories/%E5%9B%BE%E5%83%8F%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"Vulkan","slug":"Vulkan","permalink":"https://swallowjoe.github.io/tags/Vulkan/"}]}],"categories":[{"name":"图像引擎","slug":"图像引擎","permalink":"https://swallowjoe.github.io/categories/%E5%9B%BE%E5%83%8F%E5%BC%95%E6%93%8E/"}],"tags":[{"name":"Vulkan","slug":"Vulkan","permalink":"https://swallowjoe.github.io/tags/Vulkan/"}]}